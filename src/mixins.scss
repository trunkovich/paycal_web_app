@import "constants";

@mixin background-image($name, $extension: 'png', $size:false){
  @if($size){
    background-size: $size;
  }
  background-image: url(#{$image-path}#{$name}.#{$extension});

  @media (min--moz-device-pixel-ratio: 1.3),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url(#{$image-path}#{$name}#{$retina-suffix}.#{$extension});
  }
}

@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);

    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number  {
      #{$o}: nth($args, $i + 1);
    }
  }

  position: $position;
}

@mixin absolute($args) {
  @include position(absolute, $args);
}

@mixin fixed($args) {
  @include position(fixed, $args);
}

@mixin relative($args) {
  @include position(relative, $args);
}

@mixin ghostVerticalAlign(){
  height: 100%;
  &:before {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}

@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    -webkit-transform: translate(-50%, 0);
            transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    -webkit-transform: translate(0, -50%);
            transform: translate(0, -50%);
  }
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

$breakpoints: (
  'tiny':   ( max-width:  767px ),
  'small':  ( min-width:  768px ),
  'medium': ( min-width:  992px ),
  'large':  ( min-width: 1200px ),
  'custom': ( min-height:  40em )
);

@mixin breakpoint($name) {
  @if map-has-key($breakpoints, $name) {
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }
  @else {
    @warn "Couldn't find a breakpoint named `#{$name}`.";
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
  content: $content;
  display: $display;
  position: $pos;
}

@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

@mixin anchor-all-styling {
  @content;
  &.link { @content; }
  &:visited { @content; }
  &.hover { @content; }
  &:active { @content; }
}

@mixin hardware($backface: true, $perspective: 1000) {
  @if $backface {
    -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
  }
  -webkit-perspective: $perspective;
          perspective: $perspective;
}

@mixin set-margins-vw($px-size: 24){
  $vw-size: $px-size / ($base-width / 100);
  margin-right: #{$px-size}px;
  margin-left: #{$px-size}px;
  margin-right: #{$vw-size}vw;
  margin-left: #{$vw-size}vw;
}
